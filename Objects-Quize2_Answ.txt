Task 1
class Task {
}
console.log(typeof Task);
Answer: function

Task 2
class Task {
     constructor() {
          console.log(“Constructing Task”);
          this.taskId = 2;
     }
     showId() {
          console.log(this.taskId);
     }
}
let task = new Task();
task.showId();
Answer:  Constructing Task
Answer:  2

Task 3
class Task { }
console.log(window.Task === Task);
Answer:  false

Task 4
class Task {
     getTaskPriority() {
          return 1;
     }
}
class UrgentTask extends Task {
}
let task = new UrgentTask();
console.log(task.getTaskPriority());
Answer:  1

Task 5
class Task {
     static let name = “Task: unknown”;
}
console.log(Task.name);
Answer:  SyntaxError: Unexpected identifier 'name' // cause let is use with static

Task 6
class Task {
     constructor() {
          console.log(new.target.name);
     }
}
class UrgentTask extends Task { }
let task = new UrgentTask();
Answer:  UrgentTask

Task 7
let task = {
     id: 1,
     priority: “High”,
     estHours: 8,
     responsibles: [“A”, “B”]
};
let { responsibles } = task;
console.log(responsibles);
Answer:  [“A”, “B”]

Task 8
let task1 = { action: “Create…” };
let task2 = { action: “Delete…” };
let project = new Map();
project
     .set(task1, “High Priority”)
     .set(task2, “Normal Priority”);

console.log(project.size);
Answer: 2

Task 9
let task1 = { action: “Create…” };
let task2 = { action: “Delete…” };
let arr = [
     [task1, “High Priority”],
     [task2, “Low Priority”]
];
let project = new Map(arr);
for (let [k, v] of project.entries()) {
	console.log(`${k.action} - ${v}`);
}
Answer: Create… - High Priority
Answer: Delete… - Low Priority

Task 10
let task1 = { action: “Create…” };
let task2 = { action: “Delete…” };
let project = new WeakMap();
project.set(task1, “High Priority”);
console.log(project.has(task2));
Answer: false


