// Для операций над логическими значениями в JS есть || (ИЛИ), && (И) и ! (НЕ)
// могут применяться к значениям любого типа и возвращают также значения любого типа



// Оператор || (ИЛИ) выглядит как двойной символ вертикальной черты
// Синтаксис: result = a || b;  - если хотя бы один из аргументов true, то возвращает true, иначе – false
// alert( true || true ); // true
// alert( false || true ); // true
// alert( true || false ); // true
// alert( false || false ); // false

// Оператор || (ИЛИ) - запинается на «правде»:
// alert( 1 || 0 ); // 1
// alert( true || 'неважно что' ); // true
// alert( null || 1 ); // 1
// alert( undefined || 0 ); // 0
// alert( undefined || '' || false || 0 ); // 0 - Если все значения «ложные», то || возвратит последнее из них 

// if (1 || 0) { // сработает как if( true || false )
//     alert( 'верно' );
// }

// var hour = 9;
// if (hour < 10 || hour > 18) {
//   alert( 'Офис до 10 или после 18 закрыт' );
// }

// var hour = 12,
//   isWeekend = true;

// if (hour < 10 || hour > 18 || isWeekend) {
//   alert( 'Офис до 10 или после 18 или в выходной закрыт' );
// }

// var x;
// true || (x = 1);
// alert(x); // undefined, x не присвоен т.к. ИЛИ попытается вычислить первый аргумент и не находит его
// var x;
// false || (x = 1);
// alert(x); // 1 // 1 т.к. первый аргумент – false, так что ИЛИ попытается вычислить второй, запустив тем самым присваивание



// Оператор И пишется как два амперсанда &&
// Синтаксис: result = a && b; возвращает true, если оба аргумента истинны, а иначе – false:
// alert( true && true ); // true
// alert( false && true ); // false
// alert( true && false ); // false
// alert( false && false ); // false

// var hour = 12,
//   minute = 30;
//   if (hour == 12 && minute == 30) {
//     alert( 'Время 12:30' );
//   }

// if (1 && 0) { // вычислится как true && false
//     alert( 'не сработает, т.к. условие ложно' );
// }

// Оператор && (И) - запинается на «лжи»:
// alert( 1 && 0 ); // 0 - первый аргумент - true, поэтому возвращается второй аргумент
// alert( 1 && 5 ); // 5 - оба аргумента - true, поэтому возвращается последний
// alert( null && 5 ); // null - первый аргумент - false, он и возвращается, а второй аргумент игнорируется
// alert( 0 && "не важно" ); // 0 - если первый аргумент - false, остальное не важно
// alert( 1 && 2 && null && 3 ); // null - возвратилось первое «ложное» на котором остановились вычисления
// alert( 1 && 2 && 3 ); // 3 - возвратилось последнее

// Приоритет оператора И && больше, чем ИЛИ ||
// alert( 5 || 1 && 0 ); // 5 -  сначала будет вычислено правое И: 1 && 0 = 0, а уже потом – ИЛИ

// Оператор && в простых случаях можно использовать вместо if, например:
// var x = 1;
// (x > 0) && alert( 'Больше' ); // Больше - действие в правой части && выполнилось только тогдо, когда в левой части стало true
// Однако, как правило, вариант с if лучше читается и воспринимается
// var x = 1;
// if (x > 0) {
//   alert( 'Больше' );

// Оператор ! (НЕ) - Сначала приводит аргумент к логическому типу true/false, затем возвращает противоположное значение
// Cинтаксис: var result = !value

// alert( !true ); // false
// alert( !0 ); // true

// Двойное НЕ (!!) используют для преобразования значений к логическому типу:
// alert( !!"строка" ); // true
// alert( !!null ); // false






//                                              П Р И К Л А Д И





/* Що виведе цей код? */
// alert( null || 2 || undefined ); // 2 - це перше значення яке в логічному контексті дає true

/* Що виведе цей код? */
// alert( alert(1) || 2 || alert(3) ); // спочатку 1 потім 2 - 
// бо 1й алерт виведе 1 але має значення undefined і буде undefined || 2 і в результаті дасть 2; до alert(3) черга не дойде

/* Що виведе цей код? */
// alert( alert(1) && alert(2) ); // спочатку 1 потім undefined - 
// бо 1й алерт виведе 1 але має значення undefined, а так як запинається на неправді то це ж значення undefined і виведеться 

/* Що виведе цей код? */
// alert( null || 2 && 3 || 4 ); // 3 - 
// бо оператор && має вищий приоритет ніж || тому спочатку вираховується 2 && 3 і дасть 3, потім null || 3 дасть 3

/* Написати умову if для перевірки змінної age яка знаходиться між 14 і 90 включно (тобто кінці проміжку також включені). */
// let age = prompt ("Введіть число для перевірки відповідності дозволеного віку ?");
// if (age >= 14 && age <= 90) {
//     alert ("Дозволено");
// }   
// else {
//     alert ("Це не для Вас");
// }

/* Написати умову if для перевірки змінної age яка HE знаходиться між 14 і 90 включно (тобто кінці проміжку також включені). 
Рішення потрібно зробити з двума варіантами: із використанням оператора НЕ !, другий – без цього оператора.*/
// вар1:
// let age = prompt ("Введіть числом Ваш вік для перевірки доцільності вживання добавки 'Vitaminsfruits'?");
// if (!(age >= 14 && age <= 90)) {
//         alert ("Рекомендовано вживати");
//     }   
//     else {
//         alert ("Ця добавка Вам не потрібна");
//     }
// вар2:
// let age = prompt ("Введіть числом Ваш вік для перевірки доцільності вживання добавки 'Vitaminsfruits' ?");
// if (age < 14 || age > 90) {
//     alert ("Рекомендовано вживати");
// }   
// else {
//     alert ("Ця добавка Вам не потрібна");
// }

/* Які з цих if правельні, тобто будуть виконані?  
Крім того, які конкретно значення будуть результатами виразів if(...)? */
// if (-1 || 0) alert( 'первое' ); // первое, виконається
// if (-1 && 0) alert( 'второе' ); // 0 - false, невиконається
// if (null || -1 && 1) alert( 'третье' ); //третье, виконається