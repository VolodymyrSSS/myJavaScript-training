Реалізувати функцію повного клонування об'єкту.

Довідка:
Як відомо, копіювання змінної об’єкта створює ще одне посилання на той самий об’єкт, ось:
let a = {}; let b = a; // тут копіювання посилання і тому a == b ---> true, бо обидві
змінні посилаються на один і той самий об'єкт.
А тут два незалежні об’єкти нерівні, хоч і схожі (обидва порожні):
let a = {}; let b = {}; a == b ---> false;
При необхідності дублювання чи копіювання об'єкта з одним рівнем вкладеності, ми можемо створити новий об’єкт 
і повторити структуру існуючого, перебираючи його властивості та копіюючи їх на початковому рівні як от:
let user = {
  name: "John",
  age: 42
};
let clone = {}; // створений новий порожній об'єкт
// тут копіюємо властивості у новий об'єкт
for (let key in user) {
  clone[key] = user[key];
}
// В результаті маємо склонований і незалежний об'єкт clone із тим самим контентом як і в оригінальному
clone.name ---> John
clone.age ---> 42
clone.name = "Pete"; // а тут змінили контент для клонованого об'єкту, хоча
user.name ---> John в оригінальному об'єкті залишився незмінним

Або можна використати метод Object.assign(dest, prop1, prop2, ...); як от:
let clone = Object.assign({}, user);
clone.name ---> John
clone.age ---> 42

Проте, якщо ми маємо об'єкт із декількома рівнями вкладеності, як ось тут
let user = {
  name: "John",
  sizes: {
    height: 182,
    width: 80
  },
  speciality: {
   "business analitique": false,
    developer: {
      frontend: true,
      backend: false,
    },
    qa: false,
   "scram master": false,
  }
}; - що маємо робити? У цьому випадку при клонуванні недостатньо просто скопіювати 
його властивості (бо вони посилаються на властивості одного і того самого об'єкту,
що значить що об'єкти не є незалежні). 
В JS не має готового вбудованого метода копіювання об’єкту. Його необхідно створити 
- написати для цього функцію.

Вихідні дані:
let worker = {
  name: 'Modest',
  surname: 'Opakhan',
  age: 42,
  job: {
    speciality: 'frontend',
    skils: ['HTML5', 'CSS3', 'JavaScript', 'React', 'PostreSQL', 'NodeJS'],
    'in Orange team': true,
  },
  'company friends': null,
  statuses: {
    inWork: {
      isAdmin: false,
      isBuisinessAnalitic: false,
      isDeveloper: true,
      isDesigner: false,
      isQA: false,
      passID: 452744879924484,
      annualWage: 120_000,
    },
    inLife: {
      isMaried: false,
      isSingle: false,
      isDivorse: true,
      children: {
        sons: [
          {name: 'Tarry', birthday: 01/09/2000},
        ],
        daughters: [
          {name: 'Ellis', birthday: 14/07/2017},
          {name: 'Caroll', birthday: 04/06/2023}
        ],
      },
      hobbies: ['oil painting', 'arrow hunting'],
    }
  }
};


Отже, в нас є об’єкт worker, який має багаторівневу структуру вкладеності даних.
Керівництво компанії хоче по типу цього об’єкту створити незалежну копію (клон)
щоб у подальшому, можна було створювати по його типу інших працівників.

Технічні вимоги:
- Написати функцію cloneDeep(obj) для рекурсивного повного клонування об'єкту (без 
жодної передачі за посиланням) при цьому внутрішня вкладеність властивостей об'єкту 
може бути досить великою як в об’єкта worker;
- Функція має успішно клонувати властивості у вигляді об'єктів та масивів на будь-якому рівні вкладеності;
- Використовуйте синтаксис ES6 для роботи зі змінними, функціями та об'єктами.
- Передбачається використання логічних && і ||, а тому завжди думайте про те, коли ви 
хочете, щоб умова пройшла, тоді:
- використовуйте &&, коли обидві умови мають бути істинними;
- використовуйте || коли для виконання блоку достатньо однієї умови.
