// Для многократного повторения одного участка кода – предусмотрены циклы


// Цикл while имеет вид:
// while (условие) {      // Условие в скобках интерпретируется как логическое значение, поэтому вместо while (i!=0) обычно пишут while (i)
//     // код, тело цикла // Пока условие верно – выполняется код из тела цикла
// }                      // Повторение цикла называется «итерация»

// var i = 0;
// while (i < 3) {  
//   alert( i );     // выведет: 0, 1, 2
//   i++;
// }
// aбо те саме але з іншого боку
// var i = 3;
// while (i) { 
//   alert( i );   // выведет: 3, 2, 1;  при i, равном 0, значение в скобках будет false и цикл остановится
//   i--;
// }

// while (true) { // Бесконечный цикл
//     // ...
// }

//  Проверку условия можно поставить под телом цикла, используя специальный синтаксис do..while
// do {
//     // тело цикла
// } while (условие);

// var i = 0;
// do {
//   alert( i );
//   i++;
// } while (i < 3);    
// Cинтаксис do..while редко используется, т.к. обычный while нагляднее – в нём не приходится искать глазами условие и ломать голову,
//  почему оно проверяется именно в конце.

// Чаще всего применяется цикл for
// for (начало; условие; шаг) {  // поток выполнения: начало → (если условие → тело → шаг) → (если условие → тело → шаг) → … и т.д., пока верно условие
//     // ... тело цикла ...     
// }

// var i;                    // Начало: i = 0 выполняется один-единственный раз, при заходе в цикл.
// for (i = 0; i < 3; i++) { // Условие: i < 3 проверяется перед каждой итерацией и при входе в цикл, если оно нарушено, то происходит выход
//   alert( i );             // Тело: alert(i) выведет: 0, 1, 2
// }                         // Шаг: i++ выполняется после тела на каждой итерации, но перед проверкой условия

//В цикле также можно определить переменную
// for (var i = 0; i < 3; i++) {
//     alert(i); // 0, 1, 2
// }
// Эта переменная будет видна и за границами цикла, в частности, после окончания цикла i станет равно 3

// Любая часть for может быть пропущена
// var i = 0;
// for (; i < 3; i++) { // можно убрать начало
//   alert( i );        // 0, 1, 2
// }
// var i = 0;
// for (; i < 3;) {     // можно убрать начало и шаг i цикл превратился в аналог while (i<3)
//   alert( i );
// }
// for (;;) {          //  вообще убрать всё, получив бесконечный цикл
//                     //  будет выполняться вечно. При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса
// }


// Выйти из цикла можно не только при проверке условия но и, вообще, в любой момент. Эту возможность обеспечивает директива break
// Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем выдаёт cуммy
// var sum = 0;
// while (true) {
//   var value = +prompt("Введите число", '');
//   if (!value) break; // если посетитель ничего не ввёл, полностью прекращает выполнение цикла и передаёт управление на строку за его телом, то есть на alert
//   sum += value;
// }
// alert( 'Сумма: ' + sum );


// Директива continue прекращает выполнение текущей итерации цикла; прерывает не весь цикл, а только текущее выполнение его тела
// Её используют, если понятно, что на текущем повторе цикла делать больше нечего

// for (var i = 0; i < 10; i++) { // цикл использует continue, чтобы не выводить чётные значения
//     if (i % 2 == 0) continue;  // Для чётных i срабатывает continue, выполнение тела прекращается и управление передаётся на следующий проход for
//     alert(i);                  // выведет: 1, 3, 5, 7, 9;
// }

// Нельзя использовать break/continue справа от оператора "?"
// Синтаксические конструкции, которые не возвращают значений, нельзя использовать в операторе '?'
// Поэтому такой код приведёт к ошибке: (i > 5) ? alert(i) : continue;


// Бывает нужно выйти одновременно из нескольких уровней цикла, для этого используют метки, которые ставятся перед циклом.

// Метки – единственный способ для break/continue повлиять на выполнение внешнего цикла 
// Но метки не позволяют прыгнуть в произвольное место кода, в JS нет такой возможности
// Метка имеет вид "имя:", имя должно быть уникальным. Можно также выносить её на отдельную строку

// Например, внутри цикла по i находится цикл по j, и при выполнении некоторого условия мы бы хотели выйти из обоих циклов сразу
// если отмена ввода или пустая строка - завершить оба цикла
// outer: for (var i = 0; i < 3; i++) {  // здесь метка имеет имя "outer:" и задан внешний цикл
//     for (var j = 0; j < 3; j++) {
//       var input = prompt('Значение в координатах '+i+','+j, '');
//       if (!input) break outer;        //Вызов break outer ищет ближайший внешний цикл с такой меткой и переходит в его конец т.е. -
//     }                                 // управление перейдёт на alert
// }
// alert('Готово!');


        
//                                                  // П Р И К Л А Д И



/*Яке останнє значення виведе код внизу? Чому? */
// var i = 3;
// while (i) {
//   alert( i-- ); // 1 - бо alert виведе 3, потім зменшить i до 2; виведе 2, потім зменшить i до 1; виведе 1, потім зменшить i до 0; 
// }               // кінець, перевірка while не дасть циклу продовжуватись далі



/*Для кожного циклу запишіть, яке значення він виведе? Чому? */
// for (var i = 0; i < 5; ++i) alert( i ); // виведе: 0,1,2,3,4; //збільшення ++i виконується окрамо від перевірки умови, 
// for (var i = 0; i < 5; i++) alert( i ); // виведе: 0,1,2,3,4; //значення i при цьому не використвується тому не має жодної різниці між i++ та ++i.




/*За допомогою цикла for выведіть усі ПАРНІ числа від 2 до 10 */
// for (let i = 2; i <= 10; i++) {
//     if (i % 2 == 0) {
//         alert(i);
//     }
// }



/*За допомогою цикла for выведіть усі НЕПАРНІ числа від 1 до 15 */
// for (let i = 1; i <= 15; i++) {
//     if (i % 2 == 0) continue;
//         alert(i);
// }



/*Перепишіть код замінивши for на while, без зміни роботи циклу */
// for (var i = 0; i < 3; i++) {
//     alert( "номер " + i + "!" );
// }
// рішення:
// let i = 0;
// while (i < 3) {
//     alert( "номер " + i + " !" );
//     i++
// }



/*За допомогою цикла for написати код, який перевіряє 3 рази пін-код картки */
// let pinCodeRight = 9494;
// let pinCode = prompt ("Введіть ваш пін-код", "0000");
// for (let i=3; i>0; i--) {
//     pinCode = prompt("Введіть ваш пінкод ПРАВЕЛЬНО і уважно, у вас " + i + " спроби")
//     // pinCode = prompt(`Введіть ваш пінкод ПРАВЕЛЬНО і уважно, у вас " ${i} " спроби`)
// }


/*Написати цикл, який пропонує prompt ввести число більше 100. Якщо відвідувач ввів інше число - запитати ще раз
ввести число більше 100 і т.д.  Цикл повинен запитувати число доки відвідувач не введе число більше 100, або не 
натисне клавішу Cancel (ESC). Відвідувач вводить тільки числа, а тому введення нечислових форм тут можна опустити.
Написати у варіантах while...  і  do...while*/
// варіант 1:
// let num;
// while (num = prompt("Введіть будь-яке число більше 100")) {
//     if ((num > 100) && (num != null)) {
//         alert (num);
//     } else {
//         alert ("Введіть ще раз число більше 100", "101");
//     }
// }
// варіант 2:
// var num;
// do {
//   num = prompt("Введіть число больше 100?", 101);
// } while (num <= 100 && num != null);               // Перевірка num <= 100 – тобто введене значення усе ще менше 100




/*Написати код, який виводить усі прості числа в інтервалі від 2 до 10 з використанням мітки. 
Результатом повинні бути виведені прості числа 2, 3, 5, 7 .
Крім того, код повинен бути модифікованим під будь-який інший інтервал.
Натуральне число, яке більше 1, називається простим, якщо воно ні на що не ділиться крім себе і на 1.
Крім того, n > 1 – просте, якщо при діленні на любе число від 2 до до n-1 є залишок.*/
// primeNum:                                     // використали мітку з назвою primeNum:
//  for ( let n = 2; n <= 10; n++) {             // задали діапазон зовнішнього циклу від 2 до 10 з кроком збільшення на 1 - взяли число n
//     for ( let j = 2; j < n; j++) {            // задали діапазон внутрішнього циклу від 2 до числа n з кроком збільшення на 1 - взяли число j 
//         if (n % j == 0) continue primeNum;    // задали саму умову перевірки на просте число - тобто якщо взяте чило n при ділені  
//     }                                         // на j (любе число  до нього) немає залишку, оператор continue вказує продовжувати пошук простого числа
//                                               // бо введене число n  є непростим і завершує одночасно зовнішній і внутрішній цикли для нього 
//     alert (n + " - це є просте число !");     // виводить повідомлення що взяте число n є постим
// }



/* Ввести за допомогою модального вікна браузера число, яке ввів користувач.
Повторювати вивід вікна на екран до тих пір, доки не буде введено ціле число більше 1
Перевірити, що введене значення є цілим числом і більшим одиниці. 
Вивести у консолі браузера усі отримані прості числа від 1 до введеного користувачем числа.
Задати два числа, m и n. 
Вивести в консолі усі прості числа в діапазоні від m до n (меньше число будет m, більше число буде n). 
Якщо хоча б одно з чисел не задовольняє умови відповідності, які вказані вище, вывести повідомлення про помилку,
і запитати ввести числа заново.*/

// let number1 = Number(prompt('Enter first numeric except 1'));
// let number2 = Number(prompt('Enter second numeric except 1 and more that first'));

// while (!number1 || number1 < 1 || !(Number.isInteger(number1))) {
//     number1 = Number(prompt('Enter first numeric', '2'));
// }
// while (!number2 || number2 < 1 || !(Number.isInteger(number2))) {
//     number2 = Number(prompt('Enter second numeric', '20'));
// }

// for (let n = number1; n <= number2; n++) {
//     for (let i = 2; i <= n; i++) {
//         if (i * i <= n) {
//             if (!(n % i)) {
//                 break;
//             }
//         } else {
//             console.log(n);
//             break;
//         }
//     }
// }




/*Написати код, який підрахує суму усіх залишків при поступовому діленні числа на 10 тобто ділить число на 10
після чого береться ціле число і знову ділиться на 10 а усі отримані залишки сумуються. Отримамане значення
суми залишків потрібно вивести на консоль. Отримане від користувача число у вигляді рядка спочатку привести
до числа. Далі створити змінну для збереження суми залишків. Для перевірки результату:
//введене число: 123
//залишок при 123%10 = 3
// сума першого залишку sum = 3
// береться ціла частина числа: 12
// і від неї береться залишок 12%10 = 2
// цей залишок додаєм до суми першого залишку sum = 3 + 2 = 5
// остання ціла частина числа: 1
// від неї береться залишок 1%10 = 1 
// цей залишок додаєм до суми попередніх залишків sum = 5 + 1 = 6*/

let number=Number(prompt("Введіть число:"));
let sum = 0;
while (number) {
    let singleNumber = number%10;
    sum = sum + singleNumber;
    number = (number - singleNumber)   /10;
}
console.log('sum - ' + sum);