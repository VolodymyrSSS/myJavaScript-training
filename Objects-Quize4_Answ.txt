Task 1
var a = {}
if (a === {}) {
    a = 123
}
console.log(a);
Answer: {}

Task 2
let task = {
      isDone: true,
      estHours: 16
};
let anotherTask = task;
task.estHours = 8;
console.log(anotherTask.estHours);
Answer: 8

Task 3
let task = { };
Object.defineProperty(task, “action”, {
	value: “doIt”,
	enumerable: true
});
for (let field in task) console.log(field);
Answer: action

Task 4
let task = {
      id: 1
};
Object.preventExtensions(task);
task.id = 2;
task.action = “Create”;
console.log(task);
Answer: {id:2}

Task 5
let hours = 8, rate = 50;    // attantion to let
let task = {
      hours: 16,
      rate: 20,
      calculateValue: () => {
	return this.hours * this.rate;
      }
};
console.log(task.calculateValue());
Answer: NaN // Window has no props like Window.hours

Task 6
let field = “actual”;
let hours = 8;
let task = {
      [field + “Hours”]: hours
};
console.log(task);
Answer: {'actualHours': 8}

Task 7
let task = {
      isDone: false
};
let anotherTask = Object.create(task);
console.log(anotherTask.isDone);
Answer: false

Task 8
let task1 = {
	id: 1
};
let task2 = {
      id: 2,
      priority: 100
};
let target = {};
Object.assign(target, task1, task2);
console.log(target);
Answer: {id:2, priority:100}

Task 9
const task = {
      id: 1,
      action: 'Create',
      done: false
};
console.log(Object.entries(task));
Answer: [['id', 1], ['action', 'Create'], ['done', false]]

Task 10
let Task = function(action) {
	this.action = action;
};
let task1 = new Task(“create”);
let task2 = new Task(“delete”);
console.log(task1 === task2);
Answer: false