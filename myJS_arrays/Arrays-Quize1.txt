Task 1
const a1 = [1, 2, 3];
const a2 = a1;
a1[0] = 99;
console.log(a2[0]);
Answer:  99

Task 2
const entries = [‘a’, ‘b’, ‘c’];
console.log(Array.isArray(entries));
Answer: true

Task 3
const entries = [‘a’, ‘b’, ‘c’];
entries.length = 10;
console.log(entries.length);
Answer:  10

Task 4
const entries = [‘a’, ‘b’, ‘c’];
console.log(entries.toString());
Answer:  'a,b,c'

Task 5
const entries = [];
console.log(entries.pop());
Answer:  undefined

Task 6
const entries = [‘a’, ‘b’, ‘c’, ‘d’];
const newEntries = entries.slice(2);
console.log(newEntries);
Answer:  ['c', 'd']

Task 7
const entries = [‘a’, ‘b’, ‘c’, ‘d’];
const r = entries.splice(2, 1, ‘A’, ‘B’, ‘C’);
console.log(entries.toString()); 
console.log(r);
Answer:  'a, b, A, B, C, d';
Answer:  ['c']

Task 8
const ratings = [1, 2, 3, 4, 5, 4, 3, 2, 1];
console.log(ratings.indexOf(66));
Answer:  -1

Task 9
const entries = [‘a’, ‘b’, ‘c’, ‘d’];
entries.forEach(function(element, index, array) {
     if (index === 1) array.push(‘e’);
     console.log(element.toUpperCase());
});
Answer:  A 
Answer:  B
Answer:  C
Answer:  D

Task 10
const ratings = [1, 2, 3, 4, 5];
const result = ratings.reduce((start, next, index, array) => start * next); 
console.log(result);
Answer: 120

Task 11
const priority = [1, 2, 3];
const priorityCopy = Array.from(priority);
console.log(priority === priorityCopy);
Answer:  false

Task 12
const priority = [1, 2, 3];
const result = priority.find(elem => elem >= 2);
console.log(result);
Answer:  2

Task 13
const priority = [1, 2, 3];
const result = priority.includes(2);
console.log(result);
Answer:  true

Task 14
const nums = [ 1, 2, [ 3, 4 ], [ [ 5, 6 ] ] ];
console.log(nums.flat(Infinity));
Answer:  [1, 2, 3, 4, 5, 6]

Task 15
const priorityCodes = ['A', ...'BC', 'D'];
console.log(priorityCodes);
Answer:  ['A', 'B', 'C', 'D' ]

Task 16
const priority = [‘Low’, ‘Normal’, ‘High’];
const [low, …remaining] = priority;
console.log(remaining);
Answer:  [‘Normal’, ‘High’]

Task 17
const priority = new Set();
priority.add(“High”);
priority.add(“Low”);
console.log(priority.size);
Answer:  2

Task 18
const priority = new Set([“High”,“Low”]);
function logSetElements(key, value, set) {
    console.log(`s[${key}] = ${value}`);
}
priority.forEach(logSetElements);
Answer: `s[High] = High
Answer: ` s[Low] = Low

Task 19
const task1 = { action: “Create…” };
const task2 = { action: “Delete…” };
const project = new WeakSet([task1, task2]);
console.log(project.has(task1));
Answer:  true

Task 20
const task1 = { action: “Create…” };
const task2 = { action: “Delete…” };
const project = new WeakSet([task1, task2]);
for (let p of project) {	
    console.log(p.action); 
}
Answer:  Error - project is not iterable




